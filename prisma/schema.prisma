generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  image         String?   
  emailVerified DateTime? 
  isActive    Boolean     @default(true)
  quotations Quotation[]
  createdProducts Product[] @relation("ProductCreator")
  updatedProducts Product[] @relation("ProductUpdater")
  accounts      Account[]
  sessions      Session[]
}

model Product {
  id             String                 @id @default(cuid())
  barcode        String                 @unique(map: "Product_barcode_unique")
  itemNo         String
  description    String
  cost           Float
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  cartonSize     String?
  cartonWeight   Float?
  color          String?
  isActive       Boolean                @default(true)
  link1688       String?
  material       String?
  moq            Int?
  picture        String?                // 主图URL
  additionalPictures String[]           // 附图URLs
  productSize    String?
  supplier       String?
  category       String?
  createdBy      String?
  updatedBy      String?
  customerPrices CustomerProductPrice[]
  productQuotes  ProductQuote[]
  quotationItems QuotationItem[]
  creator        User?     @relation("ProductCreator", fields: [createdBy], references: [id])
  updater        User?     @relation("ProductUpdater", fields: [updatedBy], references: [id])
  images         ProductImage[]         // 关联到 ProductImage 模型
  customerHistory CustomerProductHistory[]
  invoiceItems   CommercialInvoiceItem[]  // 添加反向关联

  @@index([createdBy])
  @@index([updatedBy])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   // 图片URL
  isMain    Boolean  @default(false)  // 是否为主图
  order     Int      @default(0)      // 图片顺序
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isMain])
}

model Customer {
  id             String                 @id @default(cuid())
  name           String
  piAddress      String
  shippingMethod String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  code           String                 @unique
  currency       String                 @default("USD")
  exchangeRate   Float?
  isActive       Boolean                @default(true)
  paymentMethod  String
  piShipper      String
  remark         String?
  productPrices  CustomerProductPrice[]
  productQuotes  ProductQuote[]
  quotations     Quotation[]
  productHistory CustomerProductHistory[]
  invoices       CommercialInvoice[]    // 添加反向关联
}

model CustomerProductPrice {
  id         String   @id @default(cuid())
  customerId String
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  currency   String   @default("USD")
  productId  String
  remark     String?
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
  @@index([customerId])
  @@index([productId])
}

model Quotation {
  id             String              @id @default(cuid())
  customerId     String
  status         String
  exchangeRate   Float
  totalAmountRMB Float               @default(0)
  totalAmountUSD Float               @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  shippingDate   DateTime?           // 出货时间
  number         String              @unique
  remark         String?
  userId         String
  customerName   String
  paymentMethod  String
  piAddress      String
  piShipper      String
  shippingMethod String
  customer       Customer            @relation(fields: [customerId], references: [id])
  user           User                @relation(fields: [userId], references: [id])
  items          QuotationItem[]
  revisions      QuotationRevision[]

  @@index([number])
}

model QuotationRevision {
  id          String    @id @default(cuid())
  quotationId String
  version     Int
  changes     Json
  createdAt   DateTime  @default(now())
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model QuotationItem {
  id            String    @id @default(cuid())
  quotationId   String
  barcode       String
  serialNo      Int
  quantity      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  actualQty     Int?
  exwPriceRMB   Float
  exwPriceUSD   Float
  finalPriceRMB Float?
  finalPriceUSD Float?
  profit        Float?
  profitRate    Float?
  remark        String?
  shipping      Float?
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  quotation     Quotation @relation(fields: [quotationId], references: [id])
  color         String?
}

model ProductQuote {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  productId  String
  customerId String
  price      Float
  currency   String    @default("USD")
  status     String    @default("active")
  validUntil DateTime?
  remark     String?
  customer   Customer  @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([customerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 客户商品历史价格
model CustomerProductHistory {
  id          String    @id @default(cuid())
  customerId  String    // 客户ID
  productId   String    // 商品ID
  priceRMB    Float     // 出货价格(RMB)
  priceUSD    Float     // 出货价格(USD)
  quantity    Int       // 出货数量
  shippedAt   DateTime  // 出货时间
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 关联
  customer    Customer  @relation(fields: [customerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@index([customerId])
  @@index([productId])
  @@index([shippedAt])
}

// 商业发票
model CommercialInvoice {
  id           String    @id @default(cuid())
  number       String    @unique
  customerId   String
  status       String    @default("DRAFT")  // DRAFT, COMPLETED, CANCELLED
  shippingDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  remark       String?

  // 关联
  customer     Customer  @relation(fields: [customerId], references: [id])
  items        CommercialInvoiceItem[]

  @@index([customerId])
  @@index([status])
  @@index([shippingDate])
}

// 商业发票明细
model CommercialInvoiceItem {
  id          String    @id @default(cuid())
  ciId        String    // Commercial Invoice ID
  productId   String
  quantity    Int
  priceRMB    Float
  priceUSD    Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 关联
  ci          CommercialInvoice @relation(fields: [ciId], references: [id])
  product     Product           @relation(fields: [productId], references: [id])

  @@index([ciId])
  @@index([productId])
}
